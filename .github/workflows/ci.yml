name: Build, Test, and Validate Coverage

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore TodoManager.sln

      - name: Build
        run: dotnet build TodoManager.sln --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
            # Executa os testes de ambos os projetos com cobertura
            dotnet test tests/TodoManager.Domain.Tests/TodoManager.Domain.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --verbosity normal
            dotnet test tests/TodoManager.Database.Sqlite.Tests/TodoManager.Database.Sqlite.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --verbosity normal
            echo "Test Results:"
            ls -R tests/TodoManager.Domain.Tests/TestResults
            ls -R tests/TodoManager.Database.Sqlite.Tests/TestResults

      - name: Check Coverage Threshold
        run: |
            # Define o caminho dos arquivos de cobertura
            DOMAIN_COVERAGE_FILE=$(find tests/TodoManager.Domain.Tests/TestResults -name 'coverage.cobertura.xml' | head -n 1)
            DATABASE_COVERAGE_FILE=$(find tests/TodoManager.Database.Sqlite.Tests/TestResults -name 'coverage.cobertura.xml' | head -n 1)

            # Verifica se ambos os arquivos de cobertura existem
            if [ -z "$DOMAIN_COVERAGE_FILE" ] || [ -z "$DATABASE_COVERAGE_FILE" ]; then
                echo "Erro: Arquivo de cobertura não encontrado para um ou ambos os projetos."
                exit 1
            fi

            # Extrai as taxas de cobertura (line-rate)
            DOMAIN_COVERAGE=$(grep -oP '(?<=line-rate=")[^"]+' "$DOMAIN_COVERAGE_FILE" | head -n 1)
            DATABASE_COVERAGE=$(grep -oP '(?<=line-rate=")[^"]+' "$DATABASE_COVERAGE_FILE" | head -n 1)

            # Exibe as porcentagens de cobertura
            echo "Cobertura TodoManager.Domain.Tests: $DOMAIN_COVERAGE"
            echo "Cobertura TodoManager.Database.Sqlite.Tests: $DATABASE_COVERAGE"

            # Defina sua porcentagem mínima de cobertura para 85%
            THRESHOLD=0.85 

            # Verifica se as coberturas são menores que o limite
            if (( $(echo "$DOMAIN_COVERAGE < $THRESHOLD" | bc -l) )); then
                echo "Cobertura TodoManager.Domain.Tests $DOMAIN_COVERAGE está abaixo do limite $THRESHOLD"
                exit 1
            fi

            if (( $(echo "$DATABASE_COVERAGE < $THRESHOLD" | bc -l) )); then
                echo "Cobertura TodoManager.Database.Tests $DATABASE_COVERAGE está abaixo do limite $THRESHOLD"
                exit 1
            fi

            echo "Cobertura dos testes dentro do limite esperado"
        shell: bash

      - name: Publish Coverage Report to GitHub Pages
        run: |
          # Cria um diretório para o relatório
          mkdir coverage-report
          cp -r tests/TodoManager.Domain.Tests/TestResults/coverage.cobertura.xml coverage-report/domain-coverage.xml
          cp -r tests/TodoManager.Database.Sqlite.Tests/TestResults/coverage.cobertura.xml coverage-report/database-coverage.xml

          # Opcional: você pode gerar um HTML a partir do XML de cobertura
          # Exemplo: dotnet reportgenerator -reports:coverage-report/* -targetdir:coverage-report/html

          # Configura Git
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

          # Cria o branch gh-pages
          git checkout -b gh-pages

          # Remove todos os arquivos existentes no branch
          git rm -rf .

          # Move o relatório para o diretório root
          mv coverage-report/* .

          # Adiciona e faz commit das mudanças
          git add .
          git commit -m "Atualizar relatório de cobertura"
          git push --force origin gh-pages
