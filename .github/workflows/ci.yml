name: Build, Test, and Validate Coverage

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GIT_TRACE: 1
      GIT_CURL_VERBOSE: 1

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore TodoManager.sln --no-cache

      - name: Clean project
        run: dotnet clean TodoManager.sln

      - name: Build
        run: dotnet build TodoManager.sln --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
            dotnet test tests/TodoManager.Domain.Tests/TodoManager.Domain.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --verbosity normal
            dotnet test tests/TodoManager.Database.Sqlite.Tests/TodoManager.Database.Sqlite.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --verbosity normal
            
            echo "Test Results:"
            ls -R tests/TodoManager.Domain.Tests/TestResults
            ls -R tests/TodoManager.Database.Sqlite.Tests/TestResults

      - name: Check Coverage Threshold
        run: |
            DOMAIN_COVERAGE_FILE=$(find tests/TodoManager.Domain.Tests/TestResults -name 'coverage.cobertura.xml' | head -n 1)
            DATABASE_COVERAGE_FILE=$(find tests/TodoManager.Database.Sqlite.Tests/TestResults -name 'coverage.cobertura.xml' | head -n 1)

            if [ -z "$DOMAIN_COVERAGE_FILE" ] || [ -z "$DATABASE_COVERAGE_FILE" ]; then
                echo "Erro: Arquivo de cobertura não encontrado para um ou ambos os projetos."
                exit 1
            fi

            DOMAIN_COVERAGE=$(grep -oP '(?<=line-rate=")[^"]+' "$DOMAIN_COVERAGE_FILE" | head -n 1)
            DATABASE_COVERAGE=$(grep -oP '(?<=line-rate=")[^"]+' "$DATABASE_COVERAGE_FILE" | head -n 1)

            echo "Cobertura TodoManager.Domain.Tests: $DOMAIN_COVERAGE"
            echo "Cobertura TodoManager.Database.Sqlite.Tests: $DATABASE_COVERAGE"

            THRESHOLD=0.85 

            if (( $(echo "$DOMAIN_COVERAGE < $THRESHOLD" | bc -l) )); then
                echo "Cobertura TodoManager.Domain.Tests $DOMAIN_COVERAGE está abaixo do limite $THRESHOLD"
                exit 1
            fi

            if (( $(echo "$DATABASE_COVERAGE < $THRESHOLD" | bc -l) )); then
                echo "Cobertura TodoManager.Database.Tests $DATABASE_COVERAGE está abaixo do limite $THRESHOLD"
                exit 1
            fi

            echo "Cobertura dos testes dentro do limite esperado"
        shell: bash

      - name: Install ReportGenerator Tool
        run: |
          echo "Installing ReportGenerator tool..."
          dotnet tool install -g dotnet-reportgenerator-globaltool
          echo "ReportGenerator installed."

      - name: Generate HTML Coverage Report for Domain Tests
        run: |
          echo "Generating HTML coverage report for TodoManager.Domain..."
          reportgenerator -reports:"tests/TodoManager.Domain.Tests/TestResults/*/coverage.cobertura.xml" \
                          -targetdir:coverage-report/domain-coverage \
                          -reporttypes:Html
          echo "HTML coverage report generated in coverage-report/domain-coverage."

      - name: Generate HTML Coverage Report for Database Tests
        run: |
          echo "Generating HTML coverage report for TodoManager.Database..."
          reportgenerator -reports:"tests/TodoManager.Database.Sqlite.Tests/TestResults/*/coverage.cobertura.xml" \
                          -targetdir:coverage-report/database-coverage \
                          -reporttypes:Html
          echo "HTML coverage report generated in coverage-report/database-coverage."

      - name: Print Coverage Report Links
        run: |
            echo "Relatório de Cobertura do TodoManager.Domain: https://carloscampos2014.github.io/todomanager/coverage-report/domain-coverage/index.html"
            echo "Relatório de Cobertura do TodoManager.Database: https://carloscampos2014.github.io/todomanager/coverage-report/database-coverage/index.html"

      - name: Verify Coverage Report Before Publishing
        run: |
          echo "Verificando a estrutura do diretório antes da publicação..."
          ls -R coverage-report/domain-coverage
          ls -R coverage-report/database-coverage

      - name: Clean Up gh-pages
        env:
          MY_CUSTOM_TOKEN: ${{ secrets.MY_CUSTOM_TOKEN }}
        run: |
          echo "Limpando arquivos indesejados na branch gh-pages..."
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          git checkout gh-pages
          
          # Remove todas as pastas e arquivos, exceto 'domain-coverage' e 'database-coverage'
          find . -mindepth 1 -not -name 'domain-coverage' -not -name 'database-coverage' -exec rm -rf {} +

          git add .
          git commit -m "Remover arquivos indesejados, mantendo apenas domain-coverage e database-coverage" || echo "Nenhuma alteração a ser comitada"
          git push --force https://$MY_CUSTOM_TOKEN@github.com/carloscampos2014/todomanager.git gh-pages

      - name: Publish Coverage Report to GitHub Pages
        env:
          MY_CUSTOM_TOKEN: ${{ secrets.MY_CUSTOM_TOKEN }}
        run: |
          echo "Publicando relatório de cobertura no GitHub Pages..."
          mkdir -p coverage-report
          cp -R coverage-report/domain-coverage/* coverage-report/
          cp -R coverage-report/database-coverage/* coverage-report/

          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

          git checkout gh-pages
          git rm -rf .  # Remove arquivos existentes
          mv coverage-report/* .  # Move os relatórios de cobertura para a raiz
          git add .
          git commit -m "Publicar novos relatórios de cobertura" || echo "Nenhuma alteração a ser comitada"
          git push --force https://$MY_CUSTOM_TOKEN@github.com/carloscampos2014/todomanager.git gh-pages
