name: Build, Test, and Validate Coverage

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GIT_TRACE: 1
      GIT_CURL_VERBOSE: 1

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore TodoManager.sln --no-cache

      - name: Clean project
        run: dotnet clean TodoManager.sln

      - name: Build
        run: dotnet build TodoManager.sln --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
            dotnet test tests/TodoManager.Domain.Tests/TodoManager.Domain.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --verbosity normal
            dotnet test tests/TodoManager.Database.Sqlite.Tests/TodoManager.Database.Sqlite.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --verbosity normal
            
            echo "Test Results:"
            ls -R tests/TodoManager.Domain.Tests/TestResults
            ls -R tests/TodoManager.Database.Sqlite.Tests/TestResults

      - name: Check Coverage Threshold
        run: |
            DOMAIN_COVERAGE_FILE=$(find tests/TodoManager.Domain.Tests/TestResults -name 'coverage.cobertura.xml' | head -n 1)
            DATABASE_COVERAGE_FILE=$(find tests/TodoManager.Database.Sqlite.Tests/TestResults -name 'coverage.cobertura.xml' | head -n 1)

            if [ -z "$DOMAIN_COVERAGE_FILE" ] || [ -z "$DATABASE_COVERAGE_FILE" ]; then
                echo "Erro: Arquivo de cobertura não encontrado para um ou ambos os projetos."
                exit 1
            fi

            DOMAIN_COVERAGE=$(grep -oP '(?<=line-rate=")[^"]+' "$DOMAIN_COVERAGE_FILE" | head -n 1)
            DATABASE_COVERAGE=$(grep -oP '(?<=line-rate=")[^"]+' "$DATABASE_COVERAGE_FILE" | head -n 1)

            echo "Cobertura TodoManager.Domain.Tests: $DOMAIN_COVERAGE"
            echo "Cobertura TodoManager.Database.Sqlite.Tests: $DATABASE_COVERAGE"

            THRESHOLD=0.85 

            if (( $(echo "$DOMAIN_COVERAGE < $THRESHOLD" | bc -l) )); then
                echo "Cobertura TodoManager.Domain.Tests $DOMAIN_COVERAGE está abaixo do limite $THRESHOLD"
                exit 1
            fi

            if (( $(echo "$DATABASE_COVERAGE < $THRESHOLD" | bc -l) )); then
                echo "Cobertura TodoManager.Database.Tests $DATABASE_COVERAGE está abaixo do limite $THRESHOLD"
                exit 1
            fi

            echo "Cobertura dos testes dentro do limite esperado"
        shell: bash

      - name: Generate Combined HTML Coverage Report
        run: |
            dotnet tool install -g dotnet-reportgenerator-globaltool
            reportgenerator -reports:tests/TodoManager.Domain.Tests/TestResults/*/coverage.cobertura.xml -reports:tests/TodoManager.Database.Sqlite.Tests/TestResults/*/coverage.cobertura.xml -targetdir:coverage-report/combined -reporttypes:Html

      - name: Publish Coverage Report to GitHub Pages
        env:
          MY_CUSTOM_TOKEN: ${{ secrets.MY_CUSTOM_TOKEN }}
        run: |
          mkdir -p coverage-report  # Use -p to avoid errors if the directory exists
          cp coverage/domain-coverage.xml coverage-report/
          cp coverage/database-coverage.xml coverage-report/
          cp -R coverage-report/combined/* coverage-report/  # Copia os relatórios HTML combinados para a raiz

          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

          git checkout -b gh-pages
          git rm -rf .  # Remove arquivos existentes
          mv coverage-report/* .  # Move os relatórios de cobertura para a raiz
          git add .
          git commit -m "Atualizar relatório de cobertura" || echo "No changes to commit"
          git push --force https://$MY_CUSTOM_TOKEN@github.com/carloscampos2014/todomanager.git gh-pages
